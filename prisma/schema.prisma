// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  
  // Email verification fields
  emailVerificationToken   String?
  emailVerificationCode    String?
  emailVerificationExpires DateTime?
  
  // Two-factor authentication fields
  twoFactorEnabled   Boolean   @default(false)
  twoFactorCode      String?
  twoFactorExpires   DateTime?
  twoFactorSecret    String?   // For TOTP apps like Google Authenticator
  
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  USER
  ADMIN
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Brand Information
  productName        String
  productDescription String
  industry           String
  targetAudience     String
  toneStyle          String
  primaryColor       String
  secondaryColor     String?
  logoUrl            String?
  
  // Generated Content
  generatedContent   GeneratedContent[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GeneratedContent {
  id        String      @id @default(cuid())
  projectId String
  project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  type        ContentType
  title       String
  description String?
  content     String?     // For text content
  fileUrl     String?     // For media files
  fileName    String?
  fileSize    Int?
  mimeType    String?
  
  // AI Generation Parameters
  prompt      String?
  aiModel     String?
  parameters  Json?
  
  // Status and metadata
  status      GenerationStatus @default(PENDING)
  error       String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ContentType {
  TEXT
  IMAGE
  AUDIO
  VIDEO
}

enum GenerationStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model UserUpload {
  id       String @id @default(cuid())
  userId   String
  fileName String
  fileUrl  String
  fileSize Int
  mimeType String
  
  createdAt DateTime @default(now())
}