/**
 * Environment configuration validator and fallback system
 */

export interface EnvConfig {
  openaiApiKey: string
  awsRegion: string
  awsAccessKeyId: string
  awsSecretAccessKey: string
  awsS3Bucket: string
}

export class ConfigValidator {
  /**
   * Validate all required environment variables
   */
  static validateConfig(): { valid: boolean; missing: string[]; config?: EnvConfig } {
    const required = {
      openaiApiKey: 'OPENAI_API_KEY',
      awsRegion: 'AWS_REGION',
      awsAccessKeyId: 'AWS_ACCESS_KEY_ID',
      awsSecretAccessKey: 'AWS_SECRET_ACCESS_KEY',
      awsS3Bucket: 'AWS_S3_BUCKET',
    }

    const missing: string[] = []
    const config: Partial<EnvConfig> = {}

    for (const [key, envVar] of Object.entries(required)) {
      const value = process.env[envVar]
      if (!value) {
        missing.push(envVar)
      } else {
        config[key as keyof EnvConfig] = value
      }
    }

    if (missing.length > 0) {
      console.error('Missing required environment variables:', missing)
      console.error('Please ensure these are set in your .env.local file:')
      missing.forEach(env => console.error(`  ${env}=your_${env.toLowerCase()}_here`))
      
      return { valid: false, missing }
    }

    return { valid: true, missing: [], config: config as EnvConfig }
  }

  /**
   * Check if OpenAI is configured
   */
  static isOpenAIConfigured(): boolean {
    return !!process.env.OPENAI_API_KEY
  }

  /**
   * Check if S3 is configured
   */
  static isS3Configured(): boolean {
    return !!(
      process.env.AWS_REGION &&
      process.env.AWS_ACCESS_KEY_ID &&
      process.env.AWS_SECRET_ACCESS_KEY &&
      process.env.AWS_S3_BUCKET
    )
  }

  /**
   * Get configuration status message
   */
  static getConfigStatus(): string {
    const validation = this.validateConfig()
    
    if (validation.valid) {
      return 'All services configured correctly'
    }

    return `Configuration incomplete. Missing: ${validation.missing.join(', ')}`
  }
}

/**
 * Mock fallback services for when real services aren't configured
 */
export class FallbackService {
  /**
   * Generate mock text content when OpenAI isn't available
   */
  static generateMockText(contentType: string, brandName: string): string {
    const templates = {
      'blog-article': `# Professional ${contentType} for ${brandName}

This is a placeholder blog article that would normally be generated by our AI service. 

## Key Benefits
- Professional quality content
- Brand-aligned messaging  
- SEO optimization
- Conversion-focused copy

## Next Steps
To generate real AI content, please configure your OpenAI API key in the environment variables.

*This is placeholder content - configure OpenAI API for real generation.*`,

      'social-post': `ðŸš€ Exciting update from ${brandName}! 

Our innovative solutions are transforming the industry. Join thousands of satisfied customers who trust ${brandName} for their needs.

#${brandName.replace(/\s+/g, '')} #Innovation #Quality

*This is placeholder content - configure OpenAI API for real generation.*`,

      'email-campaign': `Subject: Transform Your Business with ${brandName}

Hi there,

We're excited to share how ${brandName} can help you achieve your goals with our professional solutions.

Key benefits:
âœ“ Proven results
âœ“ Expert support  
âœ“ Innovative approach

Ready to get started? Contact us today!

Best regards,
The ${brandName} Team

*This is placeholder content - configure OpenAI API for real generation.*`,

      'default': `Professional ${contentType} for ${brandName}

This is high-quality placeholder content that demonstrates the structure and tone your real AI-generated content will have.

To unlock full AI content generation capabilities, please configure your OpenAI API key in the environment variables.

*This is placeholder content - configure OpenAI API for real generation.*`
    }

    return templates[contentType as keyof typeof templates] || templates.default
  }

  /**
   * Generate mock file URL when S3 isn't available
   */
  static generateMockS3Url(fileName: string): string {
    return `https://mock-bucket.s3.us-east-1.amazonaws.com/${fileName}`
  }
}
